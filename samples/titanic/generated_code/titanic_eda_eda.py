"""
Generated Code for Operation: titanic_eda
Code Type: eda
Generated at: 2025-06-09T01:01:01.009412

This code was automatically generated by the Advanced Data Science MCP Server.
You can run this code independently in your Python environment.
"""


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

# Load dataset
df = pd.read_csv('dataset_titanic_load.csv')

# Basic information
print("Dataset Shape:", df.shape)
print("\nColumn Information:")
print(df.info())

print("\nBasic Statistics:")
print(df.describe())

print("\nMissing Values:")
print(df.isnull().sum())

# Numeric columns analysis
numeric_cols = df.select_dtypes(include=['number']).columns
if len(numeric_cols) > 1:
    # Correlation analysis
    plt.figure(figsize=(12, 8))
    correlation_matrix = df[numeric_cols].corr()
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)
    plt.title('Correlation Heatmap')
    plt.tight_layout()
    plt.savefig('correlation_heatmap.png', dpi=300, bbox_inches='tight')
    plt.show()

# Distribution plots
if len(numeric_cols) > 0:
    plt.figure(figsize=(15, 10))
    df[numeric_cols].hist(bins=30, alpha=0.7)
    plt.suptitle('Distribution of Numeric Variables')
    plt.tight_layout()
    plt.savefig('distributions.png', dpi=300, bbox_inches='tight')
    plt.show()

# Missing values visualization
missing_values = df.isnull().sum()
if missing_values.sum() > 0:
    plt.figure(figsize=(10, 6))
    missing_values[missing_values > 0].plot(kind='bar')
    plt.title('Missing Values by Column')
    plt.ylabel('Count')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig('missing_values.png', dpi=300, bbox_inches='tight')
    plt.show()

# Outlier detection
print("\nOutlier Analysis:")
for col in numeric_cols:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    
    outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)]
    if len(outliers) > 0:
        print(f"{col}: {len(outliers)} outliers ({len(outliers)/len(df)*100:.1f}%)")

print("\nEDA completed successfully!")
